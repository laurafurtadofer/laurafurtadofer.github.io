[
  {
    "objectID": "viz1.html",
    "href": "viz1.html",
    "title": "Hollywood Age Gaps",
    "section": "",
    "text": "Hollywood Age Gaps Over Time\n\n\n\n\nThis plot shows that couple age gaps have remained pretty consistent over time and that the data was skewed towards more recent movies. It also shows that there are many more non-same gender couples than same gender couples in Hollywood movies but that the same gender couples are equally spread out along the age gap axis. Same gender couples only appeared in this Hollywood data set after the year 2000.\nCitations:\nThis data comes from Hollywood Age Gap via Data Is Plural.\nData Science Learning Community (2024). Tidy Tuesday: A weekly social data project. https://tidytues.day\nhttps://github.com/rfordatascience/tidytuesday/tree/main/data/2023/2023-02-14"
  },
  {
    "objectID": "viz2.html",
    "href": "viz2.html",
    "title": "Valentines Gift Habits",
    "section": "",
    "text": "Valentines Gifts by Age Group\n\n\n\n\nThis plot shows that people’s shopping habits on valentines day stay pretty stable with age. The few differences are in the purchase of jewelry and greeting cards. The proportion of jewelry purchased compared to other items declines after people turn 44 and the proportion of greeting cards purchased picks up at age 35+.\nCitations:\nThis data comes from The National Retail Federation in the United States’ Valentine’s Day Data Center, specifically the Valentine’s Day survey data.\nData Science Learning Community (2024). Tidy Tuesday: A weekly social data project. https://tidytues.day\nhttps://github.com/rfordatascience/tidytuesday/tree/main/data/2024/2024-02-13"
  },
  {
    "objectID": "project2.html",
    "href": "project2.html",
    "title": "Project 2",
    "section": "",
    "text": "Show the code\nhowyoudoin &lt;- friends %&gt;% \n  filter(speaker == \"Joey Tribbiani\") %&gt;% \n  filter(str_detect(text, \"(?i)How you doin'\\\\?\")) %&gt;% \n  group_by(season) %&gt;% \n  summarise(howyoudoin_count = n()) %&gt;% \n  mutate(season = as.character(season)) \n\nhowyoudoinmerge &lt;- data.frame(\n  season = c(\"1\", \"2\", \"3\", \"10\"), \n  howyoudoin_count = c(0, 0, 0, 0)\n)\n\nhowyoudoin &lt;- bind_rows(howyoudoin, howyoudoinmerge) %&gt;% \n  mutate(season = factor(season, levels = sort(unique(as.numeric(season)))))\n\n\nggplot(howyoudoin, \n       aes(x = season, y = howyoudoin_count)) + \n  geom_col(aes(fill = season, colour = season)) + \n  labs(x = \"Season\", \n       y = \"Number of times Joey says 'how you doin'\", \n       title = \"How each season of Friends is doin'\") + \n  theme_minimal() + \n  theme(legend.position=\"none\")\n\n\n\n\n\n\n\n\n\nThis is a bar plot displaying how often Joey says “How you doin’?” per season of Friends. Joey first says his iconic catchphrase in season 4! It peaks during season 6 and by season 9 Joey barely says it anymore. This could reflect Joey’s character development as less of a ladies man or, that the writers grew tired of this joke.\n\n\nShow the code\nsmelly_cat &lt;- friends %&gt;% \n  mutate(smelly_cats = str_count(text, \"(?i)\\\\bsmelly cat\\\\b\")) %&gt;% \n  group_by(episode, season) %&gt;%\n  summarise(total_smelly_cats = sum(smelly_cats)) %&gt;% \n  ungroup()\n\nutterances_by_char &lt;- friends %&gt;% \n  group_by(season, episode, speaker) %&gt;%\n  summarise(total_utterances = n()) %&gt;% \n  ungroup() %&gt;% \n  filter(speaker == \"Chandler Bing\" | speaker == \"Monica Geller\" | speaker == \"Joey Tribbiani\" | speaker == \"Phoebe Buffay\" | speaker == \"Ross Geller\"| speaker == \"Rachel Green\")\n  \nsmelly_cats_char &lt;- left_join(utterances_by_char, smelly_cat)\n  \nggplot(smelly_cats_char, aes(x = total_utterances, y = total_smelly_cats)) + \n  geom_jitter(aes(colour = speaker, alpha = ifelse(total_smelly_cats == 0, 0.25, 1))) + \n  scale_alpha_identity() +  \n  labs(\n    title = \"Smelly Cat's Relationship to Character Dialogue\",\n    x = \"Total Utterances per Episode\",\n    y = \"Total 'Smelly Cat' Mentions per Episode\",\n    colour = \"Speaker\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nThis is a scatter plot displaying the total number of utterances per character (main 5 friends) in every episode of friends vs the total mentions of ‘Smelly Cat’. Surprisingly, on episodes with more ‘Smelly Cat’ mentions, Phoebe does not speak more often than the other friends.\n\n\nShow the code\nspeaking_len &lt;- friends %&gt;% \n  mutate(utterance_length = str_length(text)) %&gt;% \n  mutate(season = as.character(season)) %&gt;%\n  mutate(speaker = ifelse(speaker == \"Chandler Bing\" | speaker == \"Monica Geller\" | speaker == \"Joey Tribbiani\" | speaker == \"Phoebe Buffay\" | speaker == \"Ross Geller\"| speaker == \"Rachel Green\", speaker, \"Other\")) %&gt;%\n  group_by(episode, speaker) %&gt;% \n  summarise(avg_utt_length = mean(utterance_length, na.rm = TRUE)) %&gt;% \n  ungroup() %&gt;% \n  filter(!is.na(speaker), speaker != \"Other\")\n  \n\nggplot(speaking_len, aes(x = episode, y = avg_utt_length)) + \n  scale_colour_brewer(palette=\"Set1\") + \n  geom_point(aes(colour = speaker)) +  \n  geom_smooth(aes(colour = speaker), se = FALSE) +\n  labs(\n    x = \"Episodes\", \n    y = \"Average Utterance Length\", \n    title = \"Change in Friends Character Utterance Length Over an Average Season\"\n  ) +\n  theme_minimal() + \n  facet_wrap(~speaker)\n\n\n\n\n\n\n\n\n\nShow the code\nspeaking_len &lt;- friends %&gt;% \n  mutate(utterance_length = str_length(text)) %&gt;% \n  mutate(speaker = ifelse(speaker == \"Chandler Bing\" | speaker == \"Monica Geller\" | speaker == \"Joey Tribbiani\" | speaker == \"Phoebe Buffay\" | speaker == \"Ross Geller\"| speaker == \"Rachel Green\", speaker, \"Other\")) %&gt;%\n  group_by(season, speaker) %&gt;% \n  summarise(avg_utt_length = mean(utterance_length, na.rm = TRUE)) %&gt;% \n  ungroup() %&gt;% \n  filter(!is.na(speaker), speaker != \"Other\")\n\nggplot(speaking_len, aes(x = season, y = avg_utt_length)) + \n  scale_colour_brewer(palette=\"Set1\") + \n  geom_point(aes(colour = speaker)) + \n  geom_smooth(aes(colour = speaker), se = FALSE) + \n  scale_x_continuous(limits = c(1, 10), breaks = seq(1, 10, by = 1)) +\n  labs(x = \"Season\", \n       y = \"Average Utterance Length\", \n       title = \"Change in Friends Character Utterance Length Over the Series\") +\n  theme_minimal() + \n  facet_wrap(~speaker)\n\n\n\n\n\n\n\n\n\nThese are scatter plots with trend-lines displaying how average utterance length changes over time for each speaker, in both the span of the average season (per episode) and over the series (per season). Over the course of an average season of Friends, the characters utterances seem to get shorter (except for Chandler and Phoebe). Most characters utterance lengths fluctuated throughout the seasons. Notably, in season 1, Monica starts out with the shortest utterences and she slowly starts speaking longer utterances from season five onwards.\n\n\nShow the code\njanice &lt;- friends %&gt;%\n  mutate(Janices = str_count(text, \"(?&lt;=Janice)\\\\b\")) %&gt;%\n  filter(speaker == \"Chandler Bing\" | speaker == \"Monica Geller\" | speaker == \"Joey Tribbiani\" | speaker == \"Phoebe Buffay\" | speaker == \"Ross Geller\"| speaker == \"Rachel Green\" | speaker == \"Janice Litman Goralnik\" ) %&gt;% \n  group_by(speaker) %&gt;% \n  summarise(total_janices = sum(Janices))\n\n\nggplot(janice, \n       aes(x = speaker, y = total_janices)) + \n  geom_col(aes(fill = speaker)) + \n  scale_fill_brewer(palette=\"GnBu\") + \n  labs(x = \"Speaker\", \n       y = \"Times Referenced Janice\", \n       title = \"Who is most burdened by Janice?\") + \n  theme_minimal() + \n  theme(legend.position=\"none\") + \n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\nThis is a bar plot reflecting how often the characters in Friends refer to Janice. Chandler refers to Janice the most out of all his friends, this makes sense since he dates her throughout the series. Rachel is the character least burdened by Janice which must surely result in mental or ear health benefits.\n\n\nShow the code\nfirst &lt;- friends %&gt;% \n  filter(speaker != \"Scene Directions\") %&gt;% \n  group_by(season, episode) %&gt;% \n  slice_min(order_by = utterance, n = 1) %&gt;% \n  ungroup() %&gt;%\n  filter(scene == 1) %&gt;%\n  mutate(speaker = ifelse(speaker == \"Chandler Bing\" | speaker == \"Monica Geller\" | speaker == \"Joey Tribbiani\" | speaker == \"Phoebe Buffay\" | speaker == \"Ross Geller\"| speaker == \"Rachel Green\", speaker, \"Other\")) %&gt;%\n  group_by(speaker) %&gt;% \n  summarise(firstspeaker_count = n())\n\nggplot(first, \n       aes(x = speaker, y = firstspeaker_count)) + \n  geom_col(aes(fill = speaker)) + \n  scale_fill_brewer(palette=\"RdPu\") + \n  labs(x = \"Speaker\", \n       y = \"Times first to speak in an episode\", \n       title = \"Whose voice do you hear first in a Friends episode?\") + \n  theme_minimal() + \n  theme(legend.position=\"none\") \n\n\n\n\n\n\n\n\n\nThis is a bar plot showing how often the first line in an episode is spoken by each friend or generic other character. Joey is most often the first to speak, followed by Chandler. This probably reflects the writers desire to start on a comic relief moment and Joey is the silliest character.\nCitations:\nThis data comes from emilhvitfeldt.github.io/friends/ + Friends [TV series]. National Broadcasting Company."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Laura Furtado Fernandes",
    "section": "",
    "text": "Hi there! My name is Laura. I’m currently a Senior at Pomona College taking a class to learn data science skills (Foundations of Data Science in R)! I’m a Psychological Science Major and work as a research assistant at the MIC Lab and the PPPR Lab. I have three dogs and love going to the beach!"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This site is part of my Foundations of Data Science in R course at Pomona College. The analyses posted here are part of course projects!"
  },
  {
    "objectID": "project3.html",
    "href": "project3.html",
    "title": "Project 3",
    "section": "",
    "text": "Athletes tend to perform better at home, and this well-known phenomenon is called “home advantage”. It happens due to a combination of fan support, familiarity with the venue, no travel stress, etc. Clube de Regatas do Flamengo (better known as Flamengo) is a fascinating case study in this context. With an estimated 40 to 50 million supporters spread across the country, Flamengo often draws large crowds regardless of location — even in away matches. In this project, I aim to investigate whether the traditional “home advantage” also applies to Flamengo or if their massive nationwide fanbase neutralizes the traditional home-field advantage. In other words: Does Flamengo play “at home” wherever they go? Or does playing in the iconic Maracanã — the most famous stadium in the world — still provide a meaningful edge? I will be measuring performance by comparing the number of goals scored by Flamengo at home vs. away.\n\n\nShow the code\nflamengo_games %&gt;%\n   mutate(\n      is_home = ifelse(home == \"Flamengo\", TRUE, FALSE),\n      goals_for = ifelse(is_home, home_goal, away_goal)\n    )  %&gt;%\n  group_by(is_home) %&gt;% \n  summarize(mean_goals = mean(goals_for)) %&gt;% \n  ggplot(aes(x = is_home, y = mean_goals, fill = is_home)) +\n  geom_col(width = 0.6) +\n  scale_fill_brewer(palette = \"PuRd\") + \n  scale_x_discrete(labels = c(\"Away\", \"Home\")) +\n  labs(\n    title = \"Flamengo's Average Goals Scored: Home vs. Away\",\n    x = \"Game Location\",\n    y = \"Average Goals Scored\", \n    fill = \"Playing at Home?\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nThis plot highlights the difference between Flamengo’s average goals scored at home vs away, Flamengo scores on average 1.75 goals in home matches, while scoring around 1.34 goals in away games. It is a difference of less than one goal.\n\n\nShow the code\nperm_data &lt;- function(rep, team){\n  games &lt;- br_soccer %&gt;%\n    filter(home == team | away == team) %&gt;%\n    mutate(\n      is_home = ifelse(home == team, TRUE, FALSE),\n      goals_for = ifelse(is_home, home_goal, away_goal)\n    ) %&gt;%\n    select(is_home, goals_for)\n\n  obs_diff &lt;- games %&gt;%\n    group_by(is_home) %&gt;%\n    summarize(mean_goals = mean(goals_for)) %&gt;%\n    summarize(diff = mean_goals[is_home == TRUE] - mean_goals[is_home == FALSE]) %&gt;%\n    pull(diff)\n\n  permuted &lt;- games %&gt;%\n    mutate(is_home_perm = sample(is_home))\n\n  perm_diff &lt;- permuted %&gt;%\n    group_by(is_home_perm) %&gt;%\n    summarize(mean_goals = mean(goals_for)) %&gt;%\n    summarize(diff = mean_goals[is_home_perm == TRUE] - mean_goals[is_home_perm == FALSE]) %&gt;%\n    pull(diff)\n\n  tibble(rep = rep, obs_diff = obs_diff, perm_diff = perm_diff)\n}\n\nperm_results &lt;- map(1:1000, perm_data, team = \"Flamengo\") |&gt; \n  list_rbind()\n\n\n\n\nShow the code\nggplot(perm_results, aes(x = perm_diff)) +\n  geom_histogram(bins = 30, fill = \"black\", color = \"red\") +\n  geom_vline(aes(xintercept = obs_diff), color = \"blue\", linetype = \"dashed\", linewidth = 1) +\n  labs(\n    title = \"Permutation Test: Flamengo's Home vs. Away Goal Average\",\n    x = \"Permuted Mean Difference (Home - Away)\",\n    y = \"Count\"\n  ) + \n  theme_minimal()\n\n\n\n\n\n\n\n\n\nThe permutation test revealed that Flamengo does, in fact, experience a home-field advantage. As shown in the plot above, the difference in average goals scored between home and away matches (represented by the blue dashed line) is much greater than what would be expected by random chance. This provides strong evidence that Flamengo scores more goals at home than away, suggesting that playing in Maracanã may offer a meaningful boost.\nCitation:\nThis data was obtained from the Kaggle Brazilian Football Matches dataset: https://www.kaggle.com/datasets/cuecacuela/brazilian-football-matches"
  }
]